<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript基础算法</title>
      <link href="2022/04/20/20220420/"/>
      <url>2022/04/20/20220420/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>编程语言有很多，但是算法都是通用的，下面以JavaScript为例介绍几种简单的排序算法</p></blockquote><h2 id="一，时间复杂度"><a href="#一，时间复杂度" class="headerlink" title="一，时间复杂度"></a>一，时间复杂度</h2><p>学算法前当然是先要了解什么是时间复杂度，说白了就是运行完一段代码所要花费的时间，再直白点可以理解为这段代码一共执行了几句</p><p><img src="https://bkimg.cdn.bcebos.com/pic/dcc451da81cb39db86d6cf67dd160924ab1830e8?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U4MA==,g_7,xp_5,yp_5/format,f_auto"></p><p>图中O(N)和n成线性关系，N的变化倍率和时间变化倍率成正比。</p><p>由图可以看出：O(N^N) &gt;&gt; O(2^N) &gt;&gt; O(N^3) &gt;&gt; O(N^2) &gt;&gt; O(N * lnN)</p><p>也就是说O(N*lnN)的时间复杂度是最小的，在写算法时我们就是为了追求更小的时间复杂度才有了各种各样的算法和数据结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3n =&gt; O(N)</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 300 次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4n =&gt; O(N)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(N)*O(N) =&gt; O(N^2)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j &lt; n;j++)&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二，选择排序"><a href="#二，选择排序" class="headerlink" title="二，选择排序"></a>二，选择排序</h2><p>思路：遍历整个数组，找出最大/最小的数，将找出的数从当前数组删除并将这个数添加到一个新的数组中，如此反复知道数组里的元素全部移到新的数组里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _selectSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> index = i</span><br><span class="line">        <span class="keyword">var</span> min = arr[i]</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; arr[j]) &#123;</span><br><span class="line">                min = arr[j]</span><br><span class="line">                index = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr.splice(index, <span class="number">1</span>)</span><br><span class="line">        newArr.push(min)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种写法，思路一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _chooseSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = []</span><br><span class="line">    <span class="keyword">while</span> (arr.length) &#123;</span><br><span class="line">        <span class="keyword">var</span> min = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; item) &#123;</span><br><span class="line">                min = item</span><br><span class="line">                i = index</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        arr.splice(i, <span class="number">1</span>)</span><br><span class="line">        newArr.push(min)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论是那种写法都不可避免的要使用两层<code>for</code>循环，所以选择排序的时间复杂度为O(N^2)</p><h2 id="三，冒泡排序"><a href="#三，冒泡排序" class="headerlink" title="三，冒泡排序"></a>三，冒泡排序</h2><p>思路：遍历对比前一个和后一个数，如果后一个数小于前一个数就交换位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _bubbleSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">                arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">                arr[i + <span class="number">1</span>] = temp</span><br><span class="line">                <span class="comment">// es6 方法能快速交换两个数的位置</span></span><br><span class="line">                [arr[i], arr[i+<span class="number">1</span>]] = [arr[i+<span class="number">1</span>], arr[i]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里也用了两层<code>for</code>循环，所以时间复杂度也为O(N^2)</p><h2 id="四，快速排序"><a href="#四，快速排序" class="headerlink" title="四，快速排序"></a>四，快速排序</h2><p>思路：找出一个中间数将小于中间数的数放到左边，大于中间数的数放到右边，递归调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _qSort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qs</span>(<span class="params">arr,left,right</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> l = left</span><br><span class="line">        <span class="keyword">let</span> r = right</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">while</span>(l != r)&#123;</span><br><span class="line">            <span class="keyword">while</span>(arr[l] &lt;= arr[r] &amp;&amp; l &lt; r)&#123;</span><br><span class="line">                l++</span><br><span class="line">            &#125;</span><br><span class="line">            [arr[l], arr[r]] = [arr[r], arr[l]]</span><br><span class="line">            <span class="keyword">while</span>(arr[l] &lt;= arr[r] &amp;&amp; l &lt; r)&#123;</span><br><span class="line">                r--</span><br><span class="line">            &#125;</span><br><span class="line">            [arr[l], arr[r]] = [arr[r], arr[l]]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> middle = r</span><br><span class="line">        qs(arr, left, middle - <span class="number">1</span>)</span><br><span class="line">        qs(arr, middle + <span class="number">1</span>, right)</span><br><span class="line">    &#125;</span><br><span class="line">    qs(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _qSort2 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">    <span class="keyword">let</span> middleIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> middle = arr.splice(middleIndex, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> left = []</span><br><span class="line">    <span class="keyword">let</span> right = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; middle) &#123;</span><br><span class="line">            left.push(arr[i])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _qSort2(left).concat([middle], _qSort2(right))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的时间复杂度为O(NlnN)</p><blockquote><p>以上就是几种简单的算法了，在数据足够多是快速排序是明显比其他算法快不少的</p><p>下次更新二叉搜索树的实现</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2022/04/17/01/"/>
      <url>2022/04/17/01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!doctype html><html><head><meta charset='UTF-8'><meta name='viewport' content='width=device-width initial-scale=1'><title>带你认识什么是web前端</title><style type='text/css'>html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:"Lucida Console",Consolas,"Courier",monospace; }html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; }body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; }iframe { margin: auto; }a.url { word-break: break-all; }a:active, a:hover { outline: 0px; }.in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); }#write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 40px; }#write.first-line-indent p { text-indent: 2em; }#write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; }#write.first-line-indent li { margin-left: 2em; }.for-image #write { padding-left: 8px; padding-right: 8px; }body.typora-export { padding-left: 30px; padding-right: 30px; }.typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; }.typora-export .task-list-item input { pointer-events: none; }@media screen and (max-width: 500px) {  body.typora-export { padding-left: 0px; padding-right: 0px; }  #write { padding-left: 20px; padding-right: 20px; }  .CodeMirror-sizer { margin-left: 0px !important; }  .CodeMirror-gutters { display: none !important; }}#write li > figure:last-child { margin-bottom: 0.5rem; }#write ol, #write ul { position: relative; }img { max-width: 100%; vertical-align: middle; image-orientation: from-image; }button, input, select, textarea { color: inherit; font: inherit; }input[type="checkbox"], input[type="radio"] { line-height: normal; padding: 0px; }*, ::after, ::before { box-sizing: border-box; }#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; }#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; }p { line-height: inherit; }h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 4; }p { orphans: 4; }h1 { font-size: 2rem; }h2 { font-size: 1.8rem; }h3 { font-size: 1.6rem; }h4 { font-size: 1.4rem; }h5 { font-size: 1.2rem; }h6 { font-size: 1rem; }.md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; }.hidden { display: none; }.md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; }a { cursor: pointer; }sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; }sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; }#write input[type="checkbox"] { cursor: pointer; width: inherit; height: inherit; }figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; }figure > table { margin: 0px; }tr { break-inside: avoid; break-after: auto; }thead { display: table-header-group; }table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; }table.md-table td { min-width: 32px; }.CodeMirror-gutters { border-right: 0px; background-color: inherit; }.CodeMirror-linenumber { user-select: none; }.CodeMirror { text-align: left; }.CodeMirror-placeholder { opacity: 0.3; }.CodeMirror pre { padding: 0px 4px; }.CodeMirror-lines { padding: 0px; }div.hr:focus { cursor: none; }#write pre { white-space: pre-wrap; }#write.fences-no-line-wrapping pre { white-space: pre; }#write pre.ty-contain-cm { white-space: normal; }.CodeMirror-gutters { margin-right: 4px; }.md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; }.md-diagram-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; }#write .md-fences.mock-cm { white-space: pre-wrap; }.md-fences.md-fences-with-lineno { padding-left: 0px; }#write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; }.md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; }.CodeMirror-line, twitterwidget { break-inside: avoid; }.footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; }.footnotes + .footnotes { margin-top: 0px; }.md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; }li div { padding-top: 0px; }blockquote { margin: 1rem 0px; }li .mathjax-block, li p { margin: 0.5rem 0px; }li { margin: 0px; position: relative; }blockquote > :last-child { margin-bottom: 0px; }blockquote > :first-child, li > :first-child { margin-top: 0px; }.footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; }#write .footnote-line { white-space: pre-wrap; }@media print {  body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; font-variant-ligatures: no-common-ligatures; }  #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; }  .typora-export * { -webkit-print-color-adjust: exact; }  html.blink-to-pdf { font-size: 13px; }  .typora-export #write { break-after: avoid; }  .typora-export #write::after { height: 0px; }  .is-mac table { break-inside: avoid; }}.footnote-line { margin-top: 0.714em; font-size: 0.7em; }a img, img a { cursor: pointer; }pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; }p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; }#write.first-line-indent p > .md-image:only-child:not(.md-img-error) img { left: -2em; position: relative; }p > .md-image:only-child { display: inline-block; width: 100%; }#write .MathJax_Display { margin: 0.8em 0px 0px; }.md-math-block { width: 100%; }.md-math-block:not(:empty)::after { display: none; }[contenteditable="true"]:active, [contenteditable="true"]:focus, [contenteditable="false"]:active, [contenteditable="false"]:focus { outline: 0px; box-shadow: none; }.md-task-list-item { position: relative; list-style-type: none; }.task-list-item.md-task-list-item { padding-left: 0px; }.md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; }.math { font-size: 1rem; }.md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; }.md-toc-content { position: relative; margin-left: 0px; }.md-toc-content::after, .md-toc::after { display: none; }.md-toc-item { display: block; color: rgb(65, 131, 196); }.md-toc-item a { text-decoration: none; }.md-toc-inner:hover { text-decoration: underline; }.md-toc-inner { display: inline-block; cursor: pointer; }.md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; }.md-toc-h2 .md-toc-inner { margin-left: 2em; }.md-toc-h3 .md-toc-inner { margin-left: 4em; }.md-toc-h4 .md-toc-inner { margin-left: 6em; }.md-toc-h5 .md-toc-inner { margin-left: 8em; }.md-toc-h6 .md-toc-inner { margin-left: 10em; }@media screen and (max-width: 48em) {  .md-toc-h3 .md-toc-inner { margin-left: 3.5em; }  .md-toc-h4 .md-toc-inner { margin-left: 5em; }  .md-toc-h5 .md-toc-inner { margin-left: 6.5em; }  .md-toc-h6 .md-toc-inner { margin-left: 8em; }}a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; }.footnote-line a:not(.reversefootnote) { color: inherit; }.md-attr { display: none; }.md-fn-count::after { content: "."; }code, pre, samp, tt { font-family: var(--monospace); }kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; }.md-comment { color: rgb(162, 127, 3); opacity: 0.8; font-family: var(--monospace); }code { text-align: left; vertical-align: initial; }a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; }.md-inline-math .MathJax_SVG .noError { display: none !important; }.html-for-mac .inline-math-svg .MathJax_SVG { vertical-align: 0.2px; }.md-math-block .MathJax_SVG_Display { text-align: center; margin: 0px; position: relative; text-indent: 0px; max-width: none; max-height: none; min-height: 0px; min-width: 100%; width: auto; overflow-y: hidden; display: block !important; }.MathJax_SVG_Display, .md-inline-math .MathJax_SVG_Display { width: auto; margin: inherit; display: inline-block !important; }.MathJax_SVG .MJX-monospace { font-family: var(--monospace); }.MathJax_SVG .MJX-sans-serif { font-family: sans-serif; }.MathJax_SVG { display: inline; font-style: normal; font-weight: 400; line-height: normal; zoom: 90%; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; }.MathJax_SVG * { transition: none 0s ease 0s; }.MathJax_SVG_Display svg { vertical-align: middle !important; margin-bottom: 0px !important; margin-top: 0px !important; }.os-windows.monocolor-emoji .md-emoji { font-family: "Segoe UI Symbol", sans-serif; }.md-diagram-panel > svg { max-width: 100%; }[lang="flow"] svg, [lang="mermaid"] svg { max-width: 100%; height: auto; }[lang="mermaid"] .node text { font-size: 1rem; }table tr th { border-bottom: 0px; }video { max-width: 100%; display: block; margin: 0px auto; }iframe { max-width: 100%; width: 100%; border: none; }.highlight td, .highlight tr { border: 0px; }svg[id^="mermaidChart"] { line-height: 1em; }mark { background: rgb(255, 255, 0); color: rgb(0, 0, 0); }.md-html-inline .md-plain, .md-html-inline strong, mark .md-inline-math, mark strong { color: inherit; }mark .md-meta { color: rgb(0, 0, 0); opacity: 0.3 !important; }@media print {  .typora-export h1, .typora-export h2, .typora-export h3, .typora-export h4, .typora-export h5, .typora-export h6 { break-inside: avoid; }}/* Flowchart variables *//* Sequence Diagram variables *//* Gantt chart variables *//* state colors */.label {    color: #333; }.label text {  fill: #333; }.node rect,.node circle,.node ellipse,.node polygon {  fill: #BDD5EA;  stroke: #9370DB;  stroke-width: 1px; }.node .label {  text-align: center; }.node.clickable {  cursor: pointer; }.arrowheadPath {  fill: lightgrey; }.edgePath .path {  stroke: lightgrey;  stroke-width: 1.5px; }.edgeLabel {  background-color: #e8e8e8;  text-align: center; }.cluster rect {  fill: #6D6D65;  stroke: rgba(255, 255, 255, 0.25);  stroke-width: 1px; }.cluster text {  fill: #F9FFFE; }div.mermaidTooltip {  position: absolute;  text-align: center;  max-width: 200px;  padding: 2px;    font-size: 12px;  background: #6D6D65;  border: 1px solid rgba(255, 255, 255, 0.25);  border-radius: 2px;  pointer-events: none;  z-index: 100; }.actor {  stroke: #81B1DB;  fill: #BDD5EA; }text.actor {  fill: black;  stroke: none; }.actor-line {  stroke: lightgrey; }.messageLine0 {  stroke-width: 1.5;  stroke-dasharray: '2 2';  stroke: lightgrey; }.messageLine1 {  stroke-width: 1.5;  stroke-dasharray: '2 2';  stroke: lightgrey; }#arrowhead {  fill: lightgrey; }.sequenceNumber {  fill: white; }#sequencenumber {  fill: lightgrey; }#crosshead path {  fill: lightgrey !important;  stroke: lightgrey !important; }.messageText {  fill: lightgrey;  stroke: none; }.labelBox {  stroke: #81B1DB;  fill: #BDD5EA; }.labelText {  fill: #323D47;  stroke: none; }.loopText {  fill: lightgrey;  stroke: none; }.loopLine {  stroke-width: 2;  stroke-dasharray: '2 2';  stroke: #81B1DB; }.note {  stroke: rgba(255, 255, 255, 0.25);  fill: #fff5ad; }.noteText {  fill: black;  stroke: none;    font-size: 14px; }.activation0 {  fill: #f4f4f4;  stroke: #666; }.activation1 {  fill: #f4f4f4;  stroke: #666; }.activation2 {  fill: #f4f4f4;  stroke: #666; }/** Section styling */.section {  stroke: none;  opacity: 0.2; }.section0 {  fill: rgba(255, 255, 255, 0.3); }.section2 {  fill: #EAE8B9; }.section1,.section3 {  fill: white;  opacity: 0.2; }.sectionTitle0 {  fill: #F9FFFE; }.sectionTitle1 {  fill: #F9FFFE; }.sectionTitle2 {  fill: #F9FFFE; }.sectionTitle3 {  fill: #F9FFFE; }.sectionTitle {  text-anchor: start;  font-size: 11px;  text-height: 14px;   }/* Grid and axis */.grid .tick {  stroke: lightgrey;  opacity: 0.3;  shape-rendering: crispEdges; }.grid path {  stroke-width: 0; }/* Today line */.today {  fill: none;  stroke: #DB5757;  stroke-width: 2px; }/* Task styling *//* Default task */.task {  stroke-width: 2; }.taskText {  text-anchor: middle;   }.taskText:not([font-size]) {  font-size: 11px; }.taskTextOutsideRight {  fill: #323D47;  text-anchor: start;  font-size: 11px;   }.taskTextOutsideLeft {  fill: #323D47;  text-anchor: end;  font-size: 11px; }/* Special case clickable */.task.clickable {  cursor: pointer; }.taskText.clickable {  cursor: pointer;  fill: #003163 !important;  font-weight: bold; }.taskTextOutsideLeft.clickable {  cursor: pointer;  fill: #003163 !important;  font-weight: bold; }.taskTextOutsideRight.clickable {  cursor: pointer;  fill: #003163 !important;  font-weight: bold; }/* Specific task settings for the sections*/.taskText0,.taskText1,.taskText2,.taskText3 {  fill: #323D47; }.task0,.task1,.task2,.task3 {  fill: #BDD5EA;  stroke: rgba(255, 255, 255, 0.5); }.taskTextOutside0,.taskTextOutside2 {  fill: lightgrey; }.taskTextOutside1,.taskTextOutside3 {  fill: lightgrey; }/* Active task */.active0,.active1,.active2,.active3 {  fill: #81B1DB;  stroke: rgba(255, 255, 255, 0.5); }.activeText0,.activeText1,.activeText2,.activeText3 {  fill: #323D47 !important; }/* Completed task */.done0,.done1,.done2,.done3 {  stroke: grey;  fill: lightgrey;  stroke-width: 2; }.doneText0,.doneText1,.doneText2,.doneText3 {  fill: #323D47 !important; }/* Tasks on the critical line */.crit0,.crit1,.crit2,.crit3 {  stroke: #E83737;  fill: #E83737;  stroke-width: 2; }.activeCrit0,.activeCrit1,.activeCrit2,.activeCrit3 {  stroke: #E83737;  fill: #81B1DB;  stroke-width: 2; }.doneCrit0,.doneCrit1,.doneCrit2,.doneCrit3 {  stroke: #E83737;  fill: lightgrey;  stroke-width: 2;  cursor: pointer;  shape-rendering: crispEdges; }.milestone {  transform: rotate(45deg) scale(0.8, 0.8); }.milestoneText {  font-style: italic; }.doneCritText0,.doneCritText1,.doneCritText2,.doneCritText3 {  fill: #323D47 !important; }.activeCritText0,.activeCritText1,.activeCritText2,.activeCritText3 {  fill: #323D47 !important; }.titleText {  text-anchor: middle;  font-size: 18px;  fill: #323D47;   }g.classGroup text {  fill: #9370DB;  stroke: none;    font-size: 10px; }  g.classGroup text .title {    font-weight: bolder; }g.classGroup rect {  fill: #BDD5EA;  stroke: #9370DB; }g.classGroup line {  stroke: #9370DB;  stroke-width: 1; }.classLabel .box {  stroke: none;  stroke-width: 0;  fill: #BDD5EA;  opacity: 0.5; }.classLabel .label {  fill: #9370DB;  font-size: 10px; }.relation {  stroke: #9370DB;  stroke-width: 1;  fill: none; }#compositionStart {  fill: #9370DB;  stroke: #9370DB;  stroke-width: 1; }#compositionEnd {  fill: #9370DB;  stroke: #9370DB;  stroke-width: 1; }#aggregationStart {  fill: #BDD5EA;  stroke: #9370DB;  stroke-width: 1; }#aggregationEnd {  fill: #BDD5EA;  stroke: #9370DB;  stroke-width: 1; }#dependencyStart {  fill: #9370DB;  stroke: #9370DB;  stroke-width: 1; }#dependencyEnd {  fill: #9370DB;  stroke: #9370DB;  stroke-width: 1; }#extensionStart {  fill: #9370DB;  stroke: #9370DB;  stroke-width: 1; }#extensionEnd {  fill: #9370DB;  stroke: #9370DB;  stroke-width: 1; }.commit-id,.commit-msg,.branch-label {  fill: lightgrey;  color: lightgrey;   }.pieTitleText {  text-anchor: middle;  font-size: 25px;  fill: #eee;}g.stateGroup text {  stroke: none;  font-size: 10px;}g.stateGroup circle {  fill: white !important;  stroke: white !important;}g.stateGroup .state-title {  font-weight: bolder;  fill: black; }g.stateGroup rect {  fill: #ececff;  stroke: #9370DB; }g.stateGroup line {  stroke: #9370DB;  stroke-width: 1; }.transition {  stroke: #9370DB;  stroke-width: 1;  fill: none; }.stateGroup .composit {  fill: #555;  border-bottom: 1px; }.state-note {  stroke: rgba(255, 255, 255, 0.25);  fill: #fff5ad; }  .state-note text {    fill: black;    stroke: none;    font-size: 10px; }.stateLabel .box {  stroke: none;  stroke-width: 0;  fill: #BDD5EA;  opacity: 0.5; }.stateLabel text {  fill: black;  font-size: 10px;  font-weight: bold;}.cluster-label {  color:black;}.statediagram-cluster rect {  fill: #BDD5EA;  stroke: #9370DB;   stroke-width: 1px;}.statediagram-cluster rect.outer {  rx: 5px;  ry: 5px;}.statediagram-state .divider {  stroke: #9370DB; }.statediagram-state .title-state {  rx: 5px;  ry: 5px;}.statediagram-cluster.statediagram-cluster .inner {  fill: white;}.statediagram-cluster.statediagram-cluster-alt .inner {  fill: #e0e0e0;}.statediagram-cluster .inner {  rx:0;  ry:0;}.statediagram-state rect.basic {  rx: 5px;  ry: 5px;}.statediagram-state rect.divider {  stroke-dasharray: 10,10;  fill: #efefef;}.note-edge {  stroke-dasharray: 5;}.statediagram-note rect {  stroke: var(--cluster-border);  fill: #fff5ad;  stroke-width: 1px;  rx: 0;  ry: 0;}.node circle.state-start {  fill: black;  stroke: black;}.node circle.state-end {  fill: black;  stroke: white;  stroke-width: 1.5}#statediagram-barbEnd {  fill: #9370DB; }/* CSS Document *//** code highlight */.cm-s-inner .cm-variable,.cm-s-inner .cm-operator,.cm-s-inner .cm-property {    color: #b8bfc6;}.cm-s-inner .cm-keyword {    color: #C88FD0;}.cm-s-inner .cm-tag {    color: #7DF46A;}.cm-s-inner .cm-attribute {    color: #7575E4;}.CodeMirror div.CodeMirror-cursor {    border-left: 1px solid #b8bfc6;    z-index: 3;}.cm-s-inner .cm-string {    color: #D26B6B;}.cm-s-inner .cm-comment,.cm-s-inner.cm-comment {    color: #DA924A;}.cm-s-inner .cm-header,.cm-s-inner .cm-def,.cm-s-inner.cm-header,.cm-s-inner.cm-def {    color: #8d8df0;}.cm-s-inner .cm-quote,.cm-s-inner.cm-quote {    color: #57ac57;}.cm-s-inner .cm-hr {    color: #d8d5d5;}.cm-s-inner .cm-link {    color: #d3d3ef;}.cm-s-inner .cm-negative {    color: #d95050;}.cm-s-inner .cm-positive {    color: #50e650;}.cm-s-inner .cm-string-2 {    color: #f50;}.cm-s-inner .cm-meta,.cm-s-inner .cm-qualifier {    color: #b7b3b3;}.cm-s-inner .cm-builtin {    color: #f3b3f8;}.cm-s-inner .cm-bracket {    color: #997;}.cm-s-inner .cm-atom,.cm-s-inner.cm-atom {    color: #84B6CB;}.cm-s-inner .cm-number {    color: #64AB8F;}.cm-s-inner .cm-variable {    color: #b8bfc6;}.cm-s-inner .cm-variable-2 {    color: #9FBAD5;}.cm-s-inner .cm-variable-3 {    color: #1cc685;}.CodeMirror-selectedtext,.CodeMirror-selected {    background: #4a89dc;    color: #fff !important;    text-shadow: none;}.CodeMirror-gutters {    border-right: none;}/* CSS Document *//** markdown source **/.cm-s-typora-default .cm-header, .cm-s-typora-default .cm-property{    color: #cebcca;}.CodeMirror.cm-s-typora-default div.CodeMirror-cursor{    border-left: 3px solid #b8bfc6;}.cm-s-typora-default .cm-comment {    color: #9FB1FF;}.cm-s-typora-default .cm-string {    color: #A7A7D9}.cm-s-typora-default .cm-atom, .cm-s-typora-default .cm-number {    color: #848695;    font-style: italic;}.cm-s-typora-default .cm-link {    color: #95B94B;}.cm-s-typora-default .CodeMirror-activeline-background {    background: rgba(51, 51, 51, 0.72);}.cm-s-typora-default .cm-comment, .cm-s-typora-default .cm-code {color: #8aa1e1;}@import "";@import "";@import "";:root {    --bg-color:  #363B40;    --side-bar-bg-color: #2E3033;    --text-color: #b8bfc6;    --select-text-bg-color:#4a89dc;    --item-hover-bg-color: #0a0d16;    --control-text-color: #b7b7b7;    --control-text-hover-color: #eee;    --window-border: 1px solid #555;    --active-file-bg-color: rgb(34, 34, 34);    --active-file-border-color: #8d8df0;    --primary-color: #a3d5fe;    --active-file-text-color: white;    --item-hover-bg-color: #70717d;    --item-hover-text-color: white;    --primary-color: #6dc1e7;    --rawblock-edit-panel-bd: #333;    --search-select-bg-color: #428bca;}html {    font-size: 16px;}html,body {    -webkit-text-size-adjust: 100%;    -ms-text-size-adjust: 100%;    background: #363B40;    background: var(--bg-color);    fill: currentColor;    line-height: 1.625rem;}#write {    max-width: 914px;}@media only screen and (min-width: 1400px) {#write {max-width: 1024px;}}@media only screen and (min-width: 1800px) {#write {max-width: 1200px;}}html,body,button,input,select,textarea,div.code-tooltip-content {    color: #b8bfc6;    border-color: transparent;}div.code-tooltip,.md-hover-tip .md-arrow:after {    background: #333;}.popover.bottom > .arrow:after {    border-bottom-color: #333;}html,body,button,input,select,textarea {    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;}hr {    height: 2px;    border: 0;    margin: 24px 0 !important;}h1,h2,h3,h4,h5,h6 {    font-family: "Lucida Grande", "Corbel", sans-serif;    font-weight: normal;    clear: both;    -ms-word-wrap: break-word;    word-wrap: break-word;    margin: 0;    padding: 0;    color: #DEDEDE}h1 {    font-size: 2.5rem;    /* 36px */    line-height: 2.75rem;    /* 40px */    margin-bottom: 1.5rem;    /* 24px */    letter-spacing: -1.5px;}h2 {    font-size: 1.63rem;    /* 24px */    line-height: 1.875rem;    /* 30px */    margin-bottom: 1.5rem;    /* 24px */    letter-spacing: -1px;    font-weight: bold;}h3 {    font-size: 1.17rem;    /* 18px */    line-height: 1.5rem;    /* 24px */    margin-bottom: 1.5rem;    /* 24px */    letter-spacing: -1px;    font-weight: bold;}h4 {    font-size: 1.12rem;    /* 16px */    line-height: 1.375rem;    /* 22px */    margin-bottom: 1.5rem;    /* 24px */    color: white;}h5 {    font-size: 0.97rem;    /* 16px */    line-height: 1.25rem;    /* 22px */    margin-bottom: 1.5rem;    /* 24px */    font-weight: bold;}h6 {    font-size: 0.93rem;    /* 16px */    line-height: 1rem;    /* 16px */    margin-bottom: 0.75rem;    color: white;}@media (min-width: 980px) {    h3.md-focus:before,    h4.md-focus:before,    h5.md-focus:before,    h6.md-focus:before {        color: #ddd;        border: 1px solid #ddd;        border-radius: 3px;        position: absolute;        left: -1.642857143rem;        top: .357142857rem;        float: left;        font-size: 9px;        padding-left: 2px;        padding-right: 2px;        vertical-align: bottom;        font-weight: normal;        line-height: normal;    }    h3.md-focus:before {        content: 'h3';    }    h4.md-focus:before {        content: 'h4';    }    h5.md-focus:before {        content: 'h5';        top: 0px;    }    h6.md-focus:before {        content: 'h6';        top: 0px;    }}a {    text-decoration: none;    outline: 0;}a:hover {    outline: 0;}a:focus {    outline: thin dotted;}sup.md-footnote {    background-color: #555;    color: #ddd;}p {    -ms-word-wrap: break-word;    word-wrap: break-word;}p,ul,dd,ol,hr,address,pre,table,iframe,.wp-caption,.wp-audio-shortcode,.wp-video-shortcode {    margin-top: 0;    margin-bottom: 1.5rem;    /* 24px */}li > blockquote {margin-bottom: 0;}audio:not([controls]) {    display: none;}[hidden] {    display: none;}::-moz-selection {    background: #4a89dc;    color: #fff;    text-shadow: none;}*.in-text-selection,::selection {    background: #4a89dc;    color: #fff;    text-shadow: none;}ul,ol {    padding: 0 0 0 1.875rem;    /* 30px */}ul {    list-style: square;}ol {    list-style: decimal;}ul ul,ol ol,ul ol,ol ul {    margin: 0;}b,th,dt,strong {    font-weight: bold;}i,em,dfn,cite {    font-style: italic;}blockquote {    padding-left: 1.875rem;    margin: 0 0 1.875rem 1.875rem;    border-left: solid 2px #474d54;    padding-left: 30px;    margin-top: 35px;}pre,code,kbd,tt,var {    font-size: 0.875rem;    font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;}code,tt,var {    background: rgba(0, 0, 0, 0.05);}kbd {    padding: 2px 4px;    font-size: 90%;    color: #fff;    background-color: #333;    border-radius: 3px;    box-shadow: inset 0 -1px 0 rgba(0,0,0,.25);}pre.md-fences {    padding: 10px 10px 10px 30px;    margin-bottom: 20px;    background: #333;}.CodeMirror-gutters {    background: #333;    border-right: 1px solid transparent;}.enable-diagrams pre.md-fences[lang="sequence"] .code-tooltip,.enable-diagrams pre.md-fences[lang="flow"] .code-tooltip,.enable-diagrams pre.md-fences[lang="mermaid"] .code-tooltip {    bottom: -2.2em;    right: 4px;}code,kbd,tt,var {    padding: 2px 5px;}table {    max-width: 100%;    width: 100%;    border-collapse: collapse;    border-spacing: 0;}th,td {    padding: 5px 10px;    vertical-align: top;}a {    -webkit-transition: all .2s ease-in-out;    transition: all .2s ease-in-out;}hr {    background: #474d54;    /* variable */}h1 {    margin-top: 2em;}a {    color: #e0e0e0;    text-decoration: underline;}a:hover {    color: #fff;}.md-inline-math script {    color: #81b1db;}b,th,dt,strong {    color: #DEDEDE;    /* variable */}mark {    background: #D3D40E;}blockquote {    color: #9DA2A6;}table a {    color: #DEDEDE;    /* variable */}th,td {    border: solid 1px #474d54;    /* variable */}.task-list {    padding-left: 0;}.md-task-list-item {    padding-left: 1.25rem;}.md-task-list-item > input {    top: auto;}.md-task-list-item > input:before {    content: "";    display: inline-block;    width: 0.875rem;    height: 0.875rem;    vertical-align: middle;    text-align: center;    border: 1px solid #b8bfc6;    background-color: #363B40;    margin-top: -0.4rem;}.md-task-list-item > input:checked:before,.md-task-list-item > input[checked]:before {    content: '\221A';    /*◘*/    font-size: 0.625rem;    line-height: 0.625rem;    color: #DEDEDE;}/** quick open **/.auto-suggest-container {    border: 0px;    background-color: #525C65;}#typora-quick-open {    background-color: #525C65;}#typora-quick-open input{    background-color: #525C65;    border: 0;    border-bottom: 1px solid grey;}.typora-quick-open-item {    background-color: inherit;    color: inherit;}.typora-quick-open-item.active,.typora-quick-open-item:hover {    background-color: #4D8BDB;    color: white;}.typora-quick-open-item:hover {    background-color: rgba(77, 139, 219, 0.8);}.typora-search-spinner > div {  background-color: #fff;}#write pre.md-meta-block {    border-bottom: 1px dashed #ccc;    background: transparent;    padding-bottom: 0.6em;    line-height: 1.6em;}.btn,.btn .btn-default {    background: transparent;    color: #b8bfc6;}.ty-table-edit {    border-top: 1px solid gray;    background-color: #363B40;}.popover-title {    background: transparent;}.md-image>.md-meta {    color: #BBBBBB;    background: transparent;}.md-expand.md-image>.md-meta {    color: #DDD;}#write>h3:before,#write>h4:before,#write>h5:before,#write>h6:before {    border: none;    border-radius: 0px;    color: #888;    text-decoration: underline;    left: -1.4rem;    top: 0.2rem;}#write>h3.md-focus:before {    top: 2px;}#write>h4.md-focus:before {    top: 2px;}.md-toc-item {    color: #A8C2DC;}#write div.md-toc-tooltip {    background-color: #363B40;}.dropdown-menu .btn:hover,.dropdown-menu .btn:focus,.md-toc .btn:hover,.md-toc .btn:focus {    color: white;    background: black;}#toc-dropmenu {    background: rgba(50, 54, 59, 0.93);    border: 1px solid rgba(253, 253, 253, 0.15);}#toc-dropmenu .divider {    background-color: #9b9b9b;}.outline-expander:before {    top: 2px;}#typora-sidebar {    box-shadow: none;    border-right: 1px dashed;    border-right: none;}.sidebar-tabs {    border-bottom:0;}#typora-sidebar:hover .outline-title-wrapper {    border-left: 1px dashed;}.outline-title-wrapper .btn {    color: inherit;}.outline-item:hover {    border-color: #363B40;    background-color: #363B40;    color: white;}h1.md-focus .md-attr,h2.md-focus .md-attr,h3.md-focus .md-attr,h4.md-focus .md-attr,h5.md-focus .md-attr,h6.md-focus .md-attr,.md-header-span .md-attr {    color: #8C8E92;    display: inline;}.md-comment {    color: #5a95e3;    opacity: 1;}.md-inline-math svg {    color: #b8bfc6;}#math-inline-preview .md-arrow:after {    background: black;}.modal-content {    background: var(--bg-color);    border: 0;}.modal-title {    font-size: 1.5em;}.modal-content input {    background-color: rgba(26, 21, 21, 0.51);    color: white;}.modal-content .input-group-addon {    color: white;}.modal-backdrop {    background-color: rgba(174, 174, 174, 0.7);}.modal-content .btn-primary {    border-color: var(--primary-color);}.md-table-resize-popover {    background-color: #333;}.form-inline .input-group .input-group-addon {    color: white;}#md-searchpanel {    border-bottom: 1px dashed grey;}/** UI for electron */.context-menu,#spell-check-panel,#footer-word-count-info {    background-color: #42464A;}.context-menu.dropdown-menu .divider,.dropdown-menu .divider {    background-color: #777777;}footer {    color: inherit;}@media (max-width: 1000px) {    footer {        border-top: none;    }    footer:hover {        color: inherit;    }}#file-info-file-path .file-info-field-value:hover {    background-color: #555;    color: #dedede;}.megamenu-content,.megamenu-opened header {    background: var(--bg-color);}.megamenu-menu-panel h2,.megamenu-menu-panel h1,.long-btn {    color: inherit;}.megamenu-menu-panel input[type='text'] {    background: inherit;    border: 0;    border-bottom: 1px solid;}#recent-file-panel-action-btn {    background: inherit;    border: 1px grey solid;}.megamenu-menu-panel .dropdown-menu > li > a {    color: inherit;    background-color: #2F353A;    text-decoration: none;}.megamenu-menu-panel table td:nth-child(1) {    color: inherit;    font-weight: bold;}.megamenu-menu-panel tbody tr:hover td:nth-child(1) {    color: white;}.modal-footer .btn-default, .modal-footer .btn-primary,.modal-footer .btn-default:not(:hover) {    border: 1px solid;    border-color: transparent;}.btn-default:hover, .btn-default:focus, .btn-default.focus, .btn-default:active, .btn-default.active, .open > .dropdown-toggle.btn-default {    color: white;    border: 1px solid #ddd;    background-color: inherit;}.modal-header {    border-bottom: 0;}.modal-footer {    border-top: 0;}#recent-file-panel tbody tr:nth-child(2n-1) {    background-color: transparent !important;}.megamenu-menu-panel tbody tr:hover td:nth-child(2) {    color: inherit;}.megamenu-menu-panel .btn {    border: 1px solid #eee;    background: transparent;}.mouse-hover .toolbar-icon.btn:hover,#w-full.mouse-hover,#w-pin.mouse-hover {    background-color: inherit;}.typora-node::-webkit-scrollbar {    width: 5px;}.typora-node::-webkit-scrollbar-thumb:vertical {    background: rgba(250, 250, 250, 0.3);}.typora-node::-webkit-scrollbar-thumb:vertical:active {    background: rgba(250, 250, 250, 0.5);}#w-unpin {    background-color: #4182c4;}#top-titlebar, #top-titlebar * {    color: var(--item-hover-text-color);}.typora-sourceview-on #toggle-sourceview-btn,#footer-word-count:hover,.ty-show-word-count #footer-word-count {    background: #333333;}#toggle-sourceview-btn:hover {    color: #eee;    background: #333333;}/** focus mode */.on-focus-mode .md-end-block:not(.md-focus):not(.md-focus-container) * {    color: #686868 !important;}.on-focus-mode .md-end-block:not(.md-focus) img,.on-focus-mode .md-task-list-item:not(.md-focus-container)>input {    opacity: #686868 !important;}.on-focus-mode li[cid]:not(.md-focus-container){    color: #686868;}.on-focus-mode .md-fences.md-focus .CodeMirror-code>*:not(.CodeMirror-activeline) *,.on-focus-mode .CodeMirror.cm-s-inner:not(.CodeMirror-focused) * {    color: #686868 !important;}.on-focus-mode .md-focus,.on-focus-mode .md-focus-container {    color: #fff;}.on-focus-mode #typora-source .CodeMirror-code>*:not(.CodeMirror-activeline) * {    color: #686868 !important;}/*diagrams*/#write .md-focus .md-diagram-panel {    border: 1px solid #ddd;    margin-left: -1px;    width: calc(100% + 2px);}/*diagrams*/#write .md-focus.md-fences-with-lineno .md-diagram-panel {    margin-left: auto;}.md-diagram-panel-error {    color: #f1908e;}.active-tab-files #info-panel-tab-file,.active-tab-files #info-panel-tab-file:hover,.active-tab-outline #info-panel-tab-outline,.active-tab-outline #info-panel-tab-outline:hover {    color: #eee;}.sidebar-footer-item:hover,.footer-item:hover {    background: inherit;    color: white;}.ty-side-sort-btn.active,.ty-side-sort-btn:hover,.selected-folder-menu-item a:after {    color: white;}#sidebar-files-menu {    border:solid 1px;    box-shadow: 4px 4px 20px rgba(0, 0, 0, 0.79);    background-color: var(--bg-color);}.file-list-item {    border-bottom:none;}.file-list-item-summary {    opacity: 1;}.file-list-item.active:first-child {    border-top: none;}.file-node-background {    height: 32px;}.file-library-node.active>.file-node-content,.file-list-item.active {    color: white;    color: var(--active-file-text-color);}.file-library-node.active>.file-node-background{    background-color: rgb(34, 34, 34);    background-color: var(--active-file-bg-color);}.file-list-item.active {    background-color: rgb(34, 34, 34);    background-color: var(--active-file-bg-color);}#ty-tooltip {    background-color: black;    color: #eee;}.md-task-list-item>input {    margin-left: -1.3em;    margin-top: 0.3rem;    -webkit-appearance: none;}.md-mathjax-midline {    background-color: #57616b;    border-bottom: none;}footer.ty-footer {    border-color: #656565;}.ty-preferences .btn-default {    background: transparent;}.ty-preferences .btn-default:hover {    background: #57616b;}.ty-preferences select {    border: 1px solid #989698;    height: 21px;}.ty-preferences .nav-group-item.active {    background: var(--item-hover-bg-color);}.ty-preferences input[type="search"] {    border-color: #333;    background: #333;    line-height: 22px;    border-radius: 6px;    color: white;}.ty-preferences input[type="search"]:focus {    box-shadow: none;}[data-is-directory="true"] .file-node-content {    margin-bottom: 0;}.file-node-title {    line-height: 22px;}.html-for-mac .file-node-open-state, .html-for-mac .file-node-icon {    line-height: 26px;}::-webkit-scrollbar-thumb {    background: rgba(230, 230, 230, 0.30);}::-webkit-scrollbar-thumb:active {    background: rgba(230, 230, 230, 0.50);}#typora-sidebar:hover div.sidebar-content-content::-webkit-scrollbar-thumb:horizontal {    background: rgba(230, 230, 230, 0.30);}.nav-group-item:active {    background-color: #474d54;}.md-search-hit {    background: rgba(199, 140, 60, 0.81);    color: #eee;}.md-search-hit * {    color: #eee;}#md-searchpanel input {    color: white;}.export-detail,.export-item.active,.export-items-list-control {    background: #d6d6d4}</style></head><body class='typora-export os-windows'><div id='write'  class=''><p><span>web前端开发是从网页设计开发演变而来，在互联网演化进程中，网页设计开发是web1.0的产物，那时网站的主要内容都是静态的，用户使用网站的行为也以浏览为主。</span></p><p><span>随着web技术的不断提升，网站的前端由此发生了翻天覆地的变化。网页不再只是承载单一的文字和图片，各种丰富媒体让网页的内容更加生动，网页上软件化的交互形式为用户提供了更好的使用体验。由此诞生了web前端。</span></p><p><img src="https://pic4.zhimg.com/80/v2-2b6f0c53d8e6fc003ce2d73cb062e6cb_720w.jpg?source=1940ef5c" referrerpolicy="no-referrer"></p><h2><a name="1简介" class="md-header-anchor"></a><span>1.简介</span></h2><p><span>web（World Wide Web）即全球广域网，也称为万维网，它是一种基于超文本和HTTP的、全球性的、动态交互的、跨平台的分布式图形信息系统。是建立在Internet上的一种网络服务，为浏览者在Internet上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超级链接将Internet上的信息节点组织成一个互为关联的网状结构。</span></p><h2><a name="2web前端包括那些技术" class="md-header-anchor"></a><span>2.web前端包括那些技术？</span></h2><p><span>前端三大基础毫无疑问就是HTML、CSS和JS。HTML被叫做“骨”，它是用来描述网页内容和结构的。css被叫做“肉”，他是用来描述网页的样式的。js也是在web前端开发中尤为重要的一门基础技术，它也被叫做“魂”，它用来处理网页中的交互行为，随着ES6+的不断演变，开始有了node.js能运行在服务端的语言，js的热度一下子就上去了。</span></p><h2><a name="3流行的框架和组件" class="md-header-anchor"></a><span>3.流行的框架和组件</span></h2><h3><a name="ui框架" class="md-header-anchor"></a><span>UI框架</span></h3><ul><li><span>Bootstrap、Element-UI、Color UI</span></li></ul><h3><a name="js框架" class="md-header-anchor"></a><span>js框架</span></h3><ul><li><span>Angular.js、Vue.js、React.js</span></li></ul><h3><a name="可视化组件" class="md-header-anchor"></a><span>可视化组件</span></h3><ul><li><span>Echarts</span></li></ul></div></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js作用域和闭包问题</title>
      <link href="2022/04/16/200416/"/>
      <url>2022/04/16/200416/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="var-let-const-的区别"><a href="#var-let-const-的区别" class="headerlink" title="var  let  const 的区别"></a><code>var</code> <code> let</code>  <code>const</code> 的区别</h2><ol><li><p><code>var</code>:声明函数变量。函数外用<code>var</code>声明的变量会挂载在<code>window</code>下，不能跨函数访问，可以跨块访问。可以重复赋值但无法删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;   <span class="comment">// 局部变量</span></span><br><span class="line">    b = <span class="number">2</span>;       <span class="comment">// 全部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c)   <span class="comment">//undefined 预编译时变量声明被提升到之前所以不报错</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><code>let</code>:代码块(<code>&#123;&#125;</code>)内声明的变量只能在块内访问且不能跨块，跨函数访问。不能在同一个代码块中重复赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p><code>const</code>:声明常量。声明时必须有赋值，不能修改值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b : <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">obj.a = <span class="number">2</span>;       <span class="comment">// 不会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(a)   <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// obj&#123;a:1,b:2&#125; obj不会发生改变</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="什么是作用域？"><a href="#什么是作用域？" class="headerlink" title="什么是作用域？"></a>什么是作用域？</h3><p>作用域的本质是运行环境：作用域对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scope = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// scope 就是foo函数的作用域对象</span></span><br><span class="line"></span><br><span class="line">foo()  <span class="comment">//执行完成 scope就会被销毁</span></span><br></pre></td></tr></table></figure><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><blockquote><p>意义：防止内存溢出（泄露）</p></blockquote><blockquote><p>清除的核心时间: 离开作用域的时候</p></blockquote><h4 id="如何判断函数作用域需要清楚呢"><a href="#如何判断函数作用域需要清楚呢" class="headerlink" title="如何判断函数作用域需要清楚呢?"></a>如何判断函数作用域需要清楚呢?</h4><ol><li>标记清除：变量进入环境的时候标记为进入, 代码运行离开这个环境的时候: 标记环境离开. 垃圾回收机制启动发现这个环境已经没人了, 就开始收拾, 释放环境(内存空间释放出来)</li><li>引用计数：对变量引用情况统计, 如果引用次数为0, 作用域的消失直接伴随着变量文档消失，每一个变量相当于一个灯塔, 如果外界有船还需要用到这个灯塔, 灯塔会继续存在, 直到所有船都回来，这个灯塔就会消失</li></ol><p>全局作用域在页面关闭之后才会消失</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>先来看下面的代码思考<code>main</code>函数的作用域消失没有？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">&quot;data from main&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">private</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">return</span> private</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main函数执行会返回来自内部的private的函数</span></span><br><span class="line"><span class="keyword">let</span> privateFromMain = main()</span><br><span class="line">privateFromMain()</span><br></pre></td></tr></table></figure><p>上面的代码实际上将<code>private</code>传给了<code>privateFromMain</code>，所以在<code>main</code>执行完成后作用域还被保存了下来。</p><p>在上面的代码中在<code>main</code>执行完成后本该被清理的作用域被保留了下来了，所以闭包就是通过函数拥有作用域链的方式保留了一段本来应该销毁的作用域链。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单加法器的实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAdd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> add</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> add1 = createAdd()</span><br><span class="line"><span class="keyword">let</span> add2 = createAdd()</span><br><span class="line"><span class="comment">// 代码核心: add1 和 add2 都有</span></span><br><span class="line"><span class="comment">// 自己单独的作用域链 能够用保存私有变量</span></span><br><span class="line">add1()  <span class="comment">// 1</span></span><br><span class="line">add1()  <span class="comment">// 2</span></span><br><span class="line">add2()  <span class="comment">// 1</span></span><br><span class="line">add2()  <span class="comment">// 2</span></span><br><span class="line">add1()  <span class="comment">// 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再来看下面这个场景</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   创建一个对象 o </span></span><br><span class="line"><span class="comment">   o.getNumber() 一开始返回0</span></span><br><span class="line"><span class="comment">   o.add() 执行之后 o.getNumber()会增加1</span></span><br><span class="line"><span class="comment">   没有办法用其他方式修改 内部的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*闭包之前的版本*/</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> o = &#123;</span><br><span class="line">     count: <span class="number">0</span>,</span><br><span class="line">     getNumber: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> o.count</span><br><span class="line">     &#125;,</span><br><span class="line">     add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       o.count++</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 这里可以通过o.count修改它的值</span></span><br><span class="line">   </span><br><span class="line">  <span class="comment">/*闭包版本*/</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">createO</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">     <span class="keyword">var</span> o = &#123;</span><br><span class="line">       add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         count++</span><br><span class="line">       &#125;,</span><br><span class="line">       getNumber: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> count</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> o</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> o = createO()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>好处：将全局变量变成一个私有变量 =&gt; function，单独保留了访问， 限制了修改</p></blockquote><blockquote><p><strong>坏处：内存溢出</strong></p></blockquote><h3 id="循环绑定问题"><a href="#循环绑定问题" class="headerlink" title="循环绑定问题"></a>循环绑定问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对元素点击打印序数</span></span><br><span class="line"><span class="keyword">let</span> liList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.list&gt;li&quot;</span>)</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;liList.length;i++)&#123;</span><br><span class="line">     liList[i].onclick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(m) <span class="comment">// 点击任何元素都打印 3 </span></span><br><span class="line">   &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里如果不用<code>let</code>解决，那么还有什么其他解决方法来实现呢</p><p>解决问题的核心：将全局的<code>i</code>转化成局部的(传参的方式)，然后将函数立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; liList; i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">current</span>)</span>&#123;       </span><br><span class="line">        liList[current].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(current)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里传参的方式其实是将实参赋值给了current 形成了函数内的局部变量，从而将i保留了下来</span></span><br></pre></td></tr></table></figure><p>目前这个问题一律用<code>let</code>声明<code>i</code>来解决了</p><h3 id="闭包思考题"><a href="#闭包思考题" class="headerlink" title="闭包思考题"></a>闭包思考题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Q1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1 = F1()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F2</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = fn </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">200</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F2(f1) <span class="comment">// ? </span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Q2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n, o</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        fun: <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fun(m, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>); <span class="comment">// ?</span></span><br><span class="line">a.fun(<span class="number">1</span>); <span class="comment">// ?</span></span><br><span class="line">a.fun(<span class="number">2</span>); <span class="comment">// ?</span></span><br><span class="line">a.fun(<span class="number">3</span>); <span class="comment">// ?</span></span><br><span class="line"><span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>); <span class="comment">// ?</span></span><br><span class="line"><span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>) <span class="comment">//?</span></span><br><span class="line">c.fun(<span class="number">2</span>); <span class="comment">// ?</span></span><br><span class="line">c.fun(<span class="number">3</span>); <span class="comment">// ?</span></span><br></pre></td></tr></table></figure><h3 id="闭包在开发环境中的使用"><a href="#闭包在开发环境中的使用" class="headerlink" title="闭包在开发环境中的使用"></a>闭包在开发环境中的使用</h3><p>需要将商品列表中的数据按不同的字段升序降序排列该怎样做？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> order = <span class="function">(<span class="params">mode,type = <span class="string">&quot;asc&quot;</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(type == <span class="string">&quot;asc&quot;</span>) <span class="keyword">return</span> a[mode] - b[mode]</span><br><span class="line">    <span class="keyword">if</span>(type == <span class="string">&quot;desc&quot;</span>) <span class="keyword">return</span> b[mode] - a[mode]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newData = data.sort(order(<span class="string">&quot;price&quot;</span>,<span class="string">&quot;asc&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里得到的newData就是我们所需要的数据</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数组方法的应用</title>
      <link href="2022/04/13/20220413/"/>
      <url>2022/04/13/20220413/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JavaScript数组方法的应用"><a href="#JavaScript数组方法的应用" class="headerlink" title="JavaScript数组方法的应用"></a>JavaScript数组方法的应用</h2><blockquote><p>前言：今天突然想起两年没更新的博客，心血来潮更一篇！</p><p>那就来一起看一道关于js数组的题目</p></blockquote><h3 id="补全函数-getMaxArrays-中的代码，最终实现根据不同的传参情况，返回预期数组的需求。具体需求如下："><a href="#补全函数-getMaxArrays-中的代码，最终实现根据不同的传参情况，返回预期数组的需求。具体需求如下：" class="headerlink" title="补全函数 getMaxArrays 中的代码，最终实现根据不同的传参情况，返回预期数组的需求。具体需求如下："></a>补全函数 <code>getMaxArrays</code> 中的代码，最终实现根据不同的传参情况，返回预期数组的需求。具体需求如下：</h3><h4 id="（1）传入的参数列表中，所有参数皆为数组的情况下："><a href="#（1）传入的参数列表中，所有参数皆为数组的情况下：" class="headerlink" title="（1）传入的参数列表中，所有参数皆为数组的情况下："></a>（1）传入的参数列表中，所有参数皆为数组的情况下：</h4><p>1.若长度最大的数组有一到多个，则最终返回这些数组的集合（<strong>即二维数组</strong>）。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [<span class="number">12</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> a3 = [<span class="number">32</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> a3 = [<span class="number">24</span>, <span class="number">56</span>, <span class="number">12</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = getMaxArrays(a1, a2, a3);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);<span class="comment">// =&gt; [[32, 2, 3],[24, 56, 12]]</span></span><br><span class="line"><span class="keyword">var</span> newArr = getMaxArrays(a3);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// =&gt; [[24, 56, 12]]</span></span><br></pre></td></tr></table></figure><p>2.若所有数组长度相同，则返回空数组（即: []）。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a2 = [<span class="number">34</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> a3 = [<span class="number">23</span>, <span class="number">12</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newA = getMaxArrays(a2, a3);</span><br><span class="line"><span class="built_in">console</span>.log(newA); <span class="comment">// =&gt; [];</span></span><br></pre></td></tr></table></figure><h4 id="2-其他情况则返回空数组（即：-）"><a href="#2-其他情况则返回空数组（即：-）" class="headerlink" title="(2)  其他情况则返回空数组（即：[]）"></a>(2)  其他情况则返回空数组（即：[]）</h4><p>题目要求就是以上这些了（理解透彻题目要求很关键）</p><h3 id="分析所要完成的函数："><a href="#分析所要完成的函数：" class="headerlink" title="分析所要完成的函数："></a>分析所要完成的函数：</h3><ol><li><p>根据题目要求第一步先判断传入的参数是否每一个都是数组</p><ul><li><p>判断一个里的所有元素是否都为数组类型用什么判断？下面列出两种方法来判断参数是否为数组类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">Array</span>.isArray(arr) <span class="comment">// true ES6方法</span></span><br><span class="line"></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>如何遍历每个元素？这里是要判断那么肯定想到用数组的<code>every()</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">arrays.every(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item)) <span class="comment">// 返回值为布尔值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>对传入的数组集合迭代找出其中最长的数组并记录最大值</p><ul><li><p>数组迭代方法那当然是用<code>reduce()</code>了，非常丝滑，用在这里是不二之选</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = arrays.reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a.length&gt;b.length?a:b,[]) <span class="comment">//这里用箭头函数和逗号操作符简化了代码</span></span><br><span class="line"><span class="keyword">let</span> maxlength = max.length;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最后一步过滤掉数组长度小于集合内数组最大长度的数组，产生一个新数组</p><ul><li><p>没啥好说的过滤直接用<code>filter()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArr = arrays.filter(<span class="function"><span class="params">e</span> =&gt;</span> e.length === maxlength) <span class="comment">//newArr直接得到的是过滤后的数组集合</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getMaxArrays = <span class="function">(<span class="params">...arrays</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(arrays.every(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item)))&#123;</span><br><span class="line">        <span class="keyword">let</span> maxlength;</span><br><span class="line">        <span class="keyword">let</span> max = arrays.reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a.length&gt;b.length?a:b,[])</span><br><span class="line">        maxlength = max.length;</span><br><span class="line">        <span class="keyword">let</span> newArr = arrays.filter(<span class="function"><span class="params">e</span> =&gt;</span> e.length === maxlength)</span><br><span class="line">        <span class="keyword">if</span> (arrays.every(<span class="function"><span class="params">e</span> =&gt;</span> e.length === maxlength)) &#123;</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> newArr</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="搞定"><a href="#搞定" class="headerlink" title="搞定"></a>搞定</h3><blockquote><p>这里用到很多原生js的数组方法，之后有时间会发一篇专门重构底层js数组方法的文章。</p></blockquote><p><code>对了！对于不传参数时，打印函数的 arguments 会返回一个相当于是数组的东西，所以上面判断是否为数组时，当参数为空时判断值为true，并且返回的就是一个空数组([])。对于这个不知道是不是坑，反正符合题目要求，感兴趣的可以去研究研究。好了，today is here。下次 see</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文本样式化</title>
      <link href="2020/11/27/09/"/>
      <url>2020/11/27/09/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文本样式化"><a href="#文本样式化" class="headerlink" title="文本样式化"></a>文本样式化</h1><p>​        掌握了 CSS 语言的基础之后，对于您来说，下一个需要关心的 CSS 主题就是为文本添加样式——一个您将会最经常使用 CSS 做的事情。在这里，我们专注于为文本样式的基础，包括设置字体、粗细、斜体、行还有字符间距、阴影以及文本的其他特征。</p><h2 id="基本文字以及字体样式"><a href="#基本文字以及字体样式" class="headerlink" title="基本文字以及字体样式"></a>基本文字以及字体样式</h2><p>用于样式文本的 CSS 属性通常可以分为两类，我们将在本文中分别观察。</p><ul><li><strong>字体样式：</strong>作用于字体的属性，会直接应用到文本中，比如使用哪种字体，字体的大小是怎样的，字体是粗体还是斜体，等等。</li><li><strong>文本布局风格</strong>：作用于文本的间距以及其他布局功能的属性，比如，允许操纵行与字之间的空间，以及在内容框中，文本如何对齐。</li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p>color 属性设置选中元素的前景内容的颜色 (通常指文本，不过也包含一些其他东西，或者是使用 text-decoration 属性放置在文本下方或上方的线 (underline overline)。</p><p><code>color</code> 也可以接受任何合法的 css颜色值, 比如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字体种类"><a href="#字体种类" class="headerlink" title="字体种类"></a>字体种类</h4><p>要在你的文本上设置一个不同的字体，你可以使用 font-family 属性，这个允许你为浏览器指定一个字体 (或者一个字体的列表)，然后浏览器可以将这种字体应用到选中的元素上。浏览器只会把在当前机器上可用的字体应用到当前正在访问的网站上；如果字体不可用，那么就会用浏览器默认的字体代替 default font. 下面是一个简单的例子:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字体栈"><a href="#字体栈" class="headerlink" title="字体栈"></a>字体栈</h5><p>由于你无法保证你想在你的网页上使用的字体的可用性 (甚至一个网络字体可能由于某些原因而出错), 你可以提供一个<strong>字体栈</strong> (<strong>font stack</strong>)，这样的话，浏览器就有多种字体可以选择了。只需包含一个<code>font-family属性</code>，其值由几个用逗号分离的字体名称组成。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Trebuchet MS&quot;</span>, Verdana, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><ul><li>px (像素): 将像素的值赋予给你的文本。这是一个绝对单位， 它导致了在任何情况下，页面上的文本所计算出来的像素值都是一样的。</li><li>em: 1em 等于我们设计的当前元素的父元素上设置的字体大小 (更加具体的话，比如包含在父元素中的大写字母 M 的宽度) 如果你有大量设置了不同字体大小的嵌套元素，这可能会变得棘手, 但它是可行的。为什么要使用这个麻烦的单位呢? 当你习惯这样做时，那么就会变得很自然，你可以使用<code>em</code>调整任何东西的大小，不只是文本。你可以有一个单位全部都使用 em 的网站，这样维护起来会很简单。</li><li>rem: 这个单位的效果和 em 差不多，除了 1rem 等于 HTML 中的根元素的字体大小 ，而不是父元素。这可以让你更容易计算字体大小，但是遗憾的是， rem 不支持 Internet Explorer 8 和以下的版本。如果你的项目需要支持较老的浏览器，你可以坚持使用em或 px。</li></ul><p>元素的 <code>font-size</code> 属性是从该元素的父元素继承的。所以这一切都是从整个文档的根元素——html开始，浏览器的 <code>font-size</code> 标准设置的值为 16px。在根元素中的任何段落 (或者那些浏览器没有设置默认大小的元素)，会有一个最终的大小值：16px。其他元素也许有默认的大小，比如 h1元素有一个 2em 的默认值，所以它的最终大小值为 32px。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.6rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.4rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字体样式，字体粗细，文本转换和文本装饰"><a href="#字体样式，字体粗细，文本转换和文本装饰" class="headerlink" title="字体样式，字体粗细，文本转换和文本装饰"></a>字体样式，字体粗细，文本转换和文本装饰</h4><p>CSS 提供了 4 种常用的属性来改变文本的样子：</p><ol><li><p>font-style 用来打开和关闭文本 italic (斜体)。 可能的值如下 (你很少会用到这个属性，除非你因为一些理由想将斜体文字关闭斜体状态)：</p><ul><li><p><code>normal</code>: 将文本设置为普通字体 (将存在的斜体关闭)</p></li><li><p><code>italic</code>: 如果当前字体的斜体版本可用，那么文本设置为斜体版本；如果不可用，那么会利用 oblique 状态来模拟 italics。</p></li><li><p><code>oblique</code>: 将文本设置为斜体字体的模拟版本，也就是将普通文本倾斜的样式应用到文本中。</p></li></ul></li><li><p>font-weight: 设置文字的粗体大小。这里有很多值可选 (比如 <em>-light</em>, <em>-normal</em>, <em>-bold</em>, <em>-extrabold</em>, <em>-black</em>, 等等), 不过事实上你很少会用到 <code>normal</code> 和 <code>bold</code>以外的值：</p><ul><li><code>normal</code>, <code>bold</code>: 普通或者<strong>加粗</strong>的字体粗细</li><li><code>lighter</code>, <code>bolder</code>: 将当前元素的粗体设置为比其父元素粗体更细或更粗一步。<code>100</code>–<code>900</code>: 数值粗体值，如果需要，可提供比上述关键字更精细的粒度控制。</li></ul></li><li><p>text-transform: 允许你设置要转换的字体。值包括：</p><ul><li><code>none</code>: 防止任何转型。</li><li><code>uppercase</code>: 将所有文本转为大写。</li><li><code>lowercase</code>: 将所有文本转为小写。</li><li><code>capitalize</code>: 转换所有单词让其首字母大写。</li><li><code>full-width</code>: 将所有字形转换成全角，即固定宽度的正方形，类似于等宽字体，允许拉丁字符和亚洲语言字形（如中文，日文，韩文）对齐。</li></ul></li><li><p>text-decoration:设置/取消字体上的文本装饰 (你将主要使用此方法在设置链接时取消设置链接上的默认下划线。) 可用值为：</p><ul><li><code>none</code>: 取消已经存在的任何文本装饰.</li><li><code>underline</code>: <u>文本下划线.</u></li><li><code>overline</code>: 文本上划线</li><li><code>line-through</code>: <del>穿过文本的线</del> </li></ul></li></ol><h4 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h4><p>你可以为你的文本应用阴影，使用 <code>text-shadow</code> 属性。这最多需要 4 个值，如下例所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>: 4<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-tag">red</span>;</span><br></pre></td></tr></table></figure><p>四个属性如下：</p><ol><li>阴影与原始文本的水平偏移，可以使用大多数的 CSS 单位, 但是 px 是比较合适的。这个值必须指定。</li><li>阴影与原始文本的垂直偏移;效果基本上就像水平偏移，除了它向上/向下移动阴影，而不是左/右。这个值必须指定。</li><li>模糊半径 - 更高的值意味着阴影分散得更广泛。如果不包含此值，则默认为0，这意味着没有模糊。可以使用大多数的 CSS 单位 。</li><li>阴影的基础颜色，可以使用大多数的 CSS 颜色单位. 如果没有指定，默认为 <code>black</code>.</li></ol><blockquote><p><strong>注意</strong>: 正偏移值可以向右移动阴影，但也可以使用负偏移值来左右移动阴影，例如 <code>-1px -1px</code>.</p></blockquote><h5 id="多种阴影"><a href="#多种阴影" class="headerlink" title="多种阴影"></a>多种阴影</h5><p>您可以通过包含以逗号分隔的多个阴影值，将多个阴影应用于同一文本，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>: <span class="selector-tag">-1px</span> <span class="selector-tag">-1px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#aaa</span>,</span><br><span class="line">             0<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.5</span>),</span><br><span class="line">             4<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.7</span>),</span><br><span class="line">             0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 7<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.4</span>);</span><br></pre></td></tr></table></figure><h2 id="文本布局"><a href="#文本布局" class="headerlink" title="文本布局"></a>文本布局</h2><h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><p> text-align属性用来控制文本如何和它所在的内容盒子对齐。可用值如下，并且在与常规文字处理器应用程序中的工作方式几乎相同：</p><ul><li><code>left</code>: 左对齐文本。</li><li><code>right</code>: 右对齐文本。</li><li><code>center</code>: 居中文字。</li><li><code>justify</code>: 使文本展开，改变单词之间的差距，使所有文本行的宽度相同。你需要仔细使用，它可以看起来很可怕。特别是当应用于其中有很多长单词的段落时。</li></ul><h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><p> <code>line-height</code> 属性设置文本每行之间的高，可以接受大多数单位，不过也可以设置一个无单位的值，作为乘数，通常这种是比较好的做法。无单位的值乘以 <code>font-size</code>来获得 <code>line-height</code>。当行与行之间拉开空间，正文文本通常看起来更好更容易阅读。推荐的行高大约是 1.5–2 (双倍间距。) 所以要把我们的文本行高设置为字体高度的1.5倍，你可以使用这个:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">line-height</span>: 1<span class="selector-class">.5</span>;</span><br></pre></td></tr></table></figure><h3 id="字母和单词间距"><a href="#字母和单词间距" class="headerlink" title="字母和单词间距"></a>字母和单词间距</h3><p><code>letter-spacing</code> 和 <code>word-spacing</code>属性允许你设置你的文本中的字母与字母之间的间距、或是单词与单词之间的间距。你不会经常使用它们，但是可能可以通过它们，来获得一个特定的外观，或者让较为密集的文字更加可读。它们可以接受大多数单位。</p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">word-spacing</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h3><p><code>text-indent</code>指定文本内容的第一行前面应该留出多少的水平空间。比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-indent</span><span class="selector-pseudo">:2em</span>;<span class="comment">/*缩进两个字符大小*/</span></span><br></pre></td></tr></table></figure><h2 id="Font-简写"><a href="#Font-简写" class="headerlink" title="Font 简写"></a>Font 简写</h2><p>许多字体的属性也可以通过 <code>font</code> 的简写方式来设置 . 这些是按照以下顺序来写的： <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-style"><code>font-style</code></a>, <code>font-variant</code>, <code>font-weight</code>, <code>font-stretch</code>, <code>font-size</code>, <code>line-height</code>,  and <code>font-family</code>.</p><blockquote><p>如果你想要使用 <code>font</code> 的简写形式，在所有这些属性中，只有 <code>font-size</code> 和 <code>font-family</code> 是一定要指定的。</p></blockquote><blockquote><p><code>font-size</code>和 <code>line-height</code> 属性之间必须放一个正斜杠。</p></blockquote><p>一个完整的例子如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font: italic normal bold normal 3em/1.5 Helvetica, Arial, sans-serif;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十六进制颜色以及它的规律</title>
      <link href="2020/11/17/08/"/>
      <url>2020/11/17/08/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="16进制颜色的数值意义："><a href="#16进制颜色的数值意义：" class="headerlink" title="16进制颜色的数值意义："></a>16进制颜色的数值意义：</h2><p>举个例子：比如 #1A2BF4（不区分大小写），前两位1A表示的是RGB中R（Red：红色），2B表示的是RGB中的G（Green：绿色），F4表示RGB中的B（Blue：蓝色），大小从00（0）到FF（255），数值越高，颜色越深。</p><h2 id="16进制颜色的混合："><a href="#16进制颜色的混合：" class="headerlink" title="16进制颜色的混合："></a>16进制颜色的混合：</h2><p>比如对于#FF0000，绿色和蓝色都是00，而红色则是FF，则该颜色#FF0000就是红色，#550000也是红色，但是要比#FF0000的红要浅。同理，#00FF00表示绿色，#0000FF表示蓝色。</p><p>根据颜色混合原理，其实是跟物理学是一样的，红绿混合（#FFFF00）为黄色，红蓝混合（#FF00FF）为紫红色（也叫洋红），蓝绿混合（#00FFFF）为青色，而红绿蓝混合（#FFFFFF）则是白色，</p><p>#000000为黑色。</p><p>将#XXYYZZ分组，XX为第一组，YY为第二组，ZZ为第三组。显然XX，YY，ZZ分别对应红绿蓝。</p><p>1.当第一组较大，其余两组较小时，颜色偏红。</p><p>2.当第二组较大，其余两组较小时，颜色偏绿。</p><p>3.当第三组较大，其余两组较小时，颜色偏蓝。</p><p>4.当第一、二组较大，第三组较小时，颜色偏黄。      (红、绿多）</p><p>5.当第一、三组较大，第二组较小时，颜色偏紫红。（红、蓝多）</p><p>6.当第二、三组较大，第一组较小时，颜色偏青。    （绿、蓝多）</p><p>7.三组比较接近或相等时，颜色为灰色。可以通过改变数值大小来调配灰色的深浅（也可以叫明暗，数值越高越明亮，低则较暗）。如#e3e3e3表示的灰色比#a3a3a3表示的灰色要浅，当接近（#FFFFFF白色）时，灰色就很浅了。</p><h2 id="颜色的明暗（深浅）："><a href="#颜色的明暗（深浅）：" class="headerlink" title="颜色的明暗（深浅）："></a>颜色的明暗（深浅）：</h2><p>对于一个纯色的值是0<del>255即256种，对应00</del>FF，当颜色处于中间即 256/2=128（换算成16进制为80），可以看成为颜色明暗的分界线。如#800000为暗红，#008000为暗绿，数值更大，颜色变亮，数值越小，颜色越暗</p><p>原文出处：<a href="https://blog.csdn.net/weixin_39037804/article/details/100266599">https://blog.csdn.net/weixin_39037804/article/details/100266599</a></p><p>转载自CSDN</p>]]></content>
      
      
      
        <tags>
            
            <tag> 颜色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元素类别及标签嵌套规则</title>
      <link href="2020/11/17/07/"/>
      <url>2020/11/17/07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="元素类别及标签嵌套规则"><a href="#元素类别及标签嵌套规则" class="headerlink" title="元素类别及标签嵌套规则"></a>元素类别及标签嵌套规则</h1><h2 id="元素类别"><a href="#元素类别" class="headerlink" title="元素类别"></a>元素类别</h2><h3 id="block-块级元素"><a href="#block-块级元素" class="headerlink" title="block 块级元素"></a>block 块级元素</h3><blockquote><p>功能 ：用来搭建结构，承载内容，布局<br>eg:div,ul,ol,dl,li,h1~h6,p</p></blockquote><p>特点：</p><ol><li>独占一行</li><li>默认宽度为父级的100%</li><li>可以直接设置宽高</li><li>对margin,padding有效</li></ol><h3 id="inline-行内元素"><a href="#inline-行内元素" class="headerlink" title="inline 行内元素"></a>inline 行内元素</h3><blockquote><p>功能：用来区分，强调，细节化<br>eg:span,strong,em…,a</p></blockquote><p>特点：</p><ol><li>横排排列，直到装不下才会换行</li><li>不能直接设置宽高(内容撑开width height)</li><li>对垂直方向上的margin,padding无效</li></ol><h3 id="inline-block-行内块级元素"><a href="#inline-block-行内块级元素" class="headerlink" title="inline-block 行内块级元素"></a>inline-block 行内块级元素</h3><p>特点：</p><ol><li>既能设置宽高，又能在同一行中排列</li></ol><h3 id="行内替换元素：img-input"><a href="#行内替换元素：img-input" class="headerlink" title="行内替换元素：img input"></a>行内替换元素：img input</h3><h2 id="标签嵌套规则"><a href="#标签嵌套规则" class="headerlink" title="标签嵌套规则"></a>标签嵌套规则</h2><ol><li>块级元素可以嵌套大部分块级和行内元素</li><li>行内元素不能套块级，可以套行内</li><li>特殊的h1~h6,p,dt,不能套块级，只能套行内</li><li>同级的元素类别要相同</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css层叠样式表以及选择器</title>
      <link href="2020/11/17/06/"/>
      <url>2020/11/17/06/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="css层叠样式表以及选择器"><a href="#css层叠样式表以及选择器" class="headerlink" title="css层叠样式表以及选择器"></a>css层叠样式表以及选择器</h1><h2 id="css层叠样式表"><a href="#css层叠样式表" class="headerlink" title="css层叠样式表"></a>css层叠样式表</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>层叠样式表 (Cascading Style Sheets，缩写为 CSS），是一种 样式表 语言，用来描述 HTML 或 XML（包括如 SVG、MathML、XHTML 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。</p><p>CSS 是开放网络的核心语言之一，由 W3C 规范 实现跨浏览器的标准化。CSS节省了大量的工作。 样式可以通过定义保存在外部.css文件中，同时控制多个网页的布局，这意味着开发者不必经历在所有网页上编辑布局的麻烦。CSS 被分为不同等级：CSS1 现已废弃， CSS2.1 是推荐标准， CSS3 分成多个小模块且正在标准化中。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h4><p>写在标签style属性里面的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:#ooo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><p>写在一般位于头部内style标签里的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="外联样式"><a href="#外联样式" class="headerlink" title="外联样式"></a>外联样式</h4><p>写在.css文件里的样式，通过link标签在头部引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/common.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><h3 id="（1）通配符选择器-对网页中所有的标签有用-；"><a href="#（1）通配符选择器-对网页中所有的标签有用-；" class="headerlink" title="（1）通配符选择器 对网页中所有的标签有用 ；"></a>（1）通配符选择器 对网页中所有的标签有用 ；</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    *&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（2）类选择器-在标签里取一个类名，对有此类名的元素有效有效-；"><a href="#（2）类选择器-在标签里取一个类名，对有此类名的元素有效有效-；" class="headerlink" title="（2）类选择器 在标签里取一个类名，对有此类名的元素有效有效  ；"></a>（2）类选择器 在标签里取一个类名，对有此类名的元素有效有效  ；</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（3）id选择器-命名一个id，该id一定是唯一的-；"><a href="#（3）id选择器-命名一个id，该id一定是唯一的-；" class="headerlink" title="（3）id选择器 命名一个id，该id一定是唯一的 ；"></a>（3）id选择器 命名一个id，该id一定是唯一的 ；</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#box</span>&#123;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（4）元素-节点选择器-直接选择标签符；"><a href="#（4）元素-节点选择器-直接选择标签符；" class="headerlink" title="（4）元素/节点选择器 直接选择标签符；"></a>（4）元素/节点选择器 直接选择标签符；</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（5）属性选择器-根据元素的属性和属性值来匹配元素；"><a href="#（5）属性选择器-根据元素的属性和属性值来匹配元素；" class="headerlink" title="（5）属性选择器 根据元素的属性和属性值来匹配元素；"></a>（5）属性选择器 根据元素的属性和属性值来匹配元素；</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">----------</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（6）派生选择器"><a href="#（6）派生选择器" class="headerlink" title="（6）派生选择器"></a>（6）派生选择器</h3><p>(1)后代选择器 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.grandpa</span> <span class="selector-class">.son</span>&#123;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grandpa&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2)子元素选择器 只能选择下一代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.grandpa</span>&gt;<span class="selector-class">.father</span>&gt;<span class="selector-class">.son</span>&#123;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grandpa&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)相邻兄弟选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h1+p&#123;</span><br><span class="line"><span class="css">        <span class="comment">/*选中所有紧挨着h1标签的第一个p标签*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（7）群组选择器-box1-box2；"><a href="#（7）群组选择器-box1-box2；" class="headerlink" title="（7）群组选择器 .box1,.box2；"></a>（7）群组选择器 .box1,.box2；</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>over</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>div盒子模型</title>
      <link href="2020/11/17/05/"/>
      <url>2020/11/17/05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="div盒子模型"><a href="#div盒子模型" class="headerlink" title="div盒子模型"></a>div盒子模型</h1><blockquote><p>作为容器用于搭建网页结构、布局；</p></blockquote><p><img src="https://www.w3school.com.cn/i/ct_boxmodel.gif"></p><h2 id="margin（外边距）-与其他元素间的距离；"><a href="#margin（外边距）-与其他元素间的距离；" class="headerlink" title="margin（外边距） 与其他元素间的距离；"></a>margin（外边距） 与其他元素间的距离；</h2><blockquote><p>外边距合并：相邻的上下外边距合并为较大的那个外边距。</p></blockquote><p><img src="https://www.w3school.com.cn/i/ct_css_margin_collapsing_example_1.gif"></p><blockquote><p>详细了解请前往<a href="https://www.w3school.com.cn/css/css_margin_collapsing.asp">W3C</a></p></blockquote><h2 id="padding（内边距）：与内容区域留出的空白位置；"><a href="#padding（内边距）：与内容区域留出的空白位置；" class="headerlink" title="padding（内边距）：与内容区域留出的空白位置；"></a>padding（内边距）：与内容区域留出的空白位置；</h2><h2 id="border（边框线）；"><a href="#border（边框线）；" class="headerlink" title="border（边框线）；"></a>border（边框线）；</h2><h2 id="box-sizing盒子计算方式"><a href="#box-sizing盒子计算方式" class="headerlink" title="box-sizing盒子计算方式"></a>box-sizing盒子计算方式</h2><h3 id="1-content-box-默认值，标准盒子模型"><a href="#1-content-box-默认值，标准盒子模型" class="headerlink" title="(1)content-box(默认值，标准盒子模型)"></a>(1)content-box(默认值，标准盒子模型)</h3><blockquote><p>width=border-left+padding-left+width+padding-right+border-right<br>height=border-top+padding-top+height+padding-bottom+border-bottom</p></blockquote><h3 id="2-border-box-IE盒子模型，盒子的宽高不会随padding和border而改变"><a href="#2-border-box-IE盒子模型，盒子的宽高不会随padding和border而改变" class="headerlink" title="(2)border-box(IE盒子模型，盒子的宽高不会随padding和border而改变)"></a>(2)border-box(IE盒子模型，盒子的宽高不会随padding和border而改变)</h3><blockquote><p>原始width=border-left+padding-left+内容width+padding-right+border-right<br>原始height=border-top+padding-top+内容height+padding-bottom+border-bottom</p></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="带有margin-padding-border的盒子"><a href="#带有margin-padding-border的盒子" class="headerlink" title="带有margin,padding,border的盒子"></a>带有margin,padding,border的盒子</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">margin</span>:<span class="number">100px</span> auto;<span class="comment">/*auto为左右居中*/</span></span><br><span class="line">        <span class="attribute">padding</span>:<span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">border-top</span>:<span class="number">#def</span> <span class="number">30px</span> solid;</span><br><span class="line">        <span class="attribute">border-right</span>:blue <span class="number">30px</span> solid;</span><br><span class="line">        <span class="attribute">border-left</span>:green <span class="number">30px</span> solid;</span><br><span class="line">        <span class="attribute">border-bottom</span>:red <span class="number">30px</span> solid;</span><br><span class="line">        <span class="attribute">background-color</span>:<span class="number">#abc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://s3.ax1x.com/2020/11/17/DV50nx.png"></p><p><img src="https://s3.ax1x.com/2020/11/17/DVbMjJ.png"></p><h3 id="用border做三角形"><a href="#用border做三角形" class="headerlink" title="用border做三角形"></a>用border做三角形</h3><blockquote><p>第一步在上面的基础上去掉margin和padding并将height和width设为0，因为div是块级元素所以如果我们不给他width时，它的width是父级的100%，所以我们将它设置为0.</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">border-top</span>:<span class="number">#def</span> <span class="number">80px</span> solid;</span><br><span class="line">        <span class="attribute">border-right</span>:blue <span class="number">80px</span> solid;</span><br><span class="line">        <span class="attribute">border-left</span>:green <span class="number">80px</span> solid;</span><br><span class="line">        <span class="attribute">border-bottom</span>:red <span class="number">80px</span> solid;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>此时，就能看到盒子由四个三角形组成</p></blockquote><p><img src="https://s3.ax1x.com/2020/11/17/DVjvAs.png"></p><blockquote><p>这时需要那个方向的三角形就把那个方向上的border删掉，再把其他两边的border-color设置为transparent(透明)。比如向下的三角形：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">border-top</span>:<span class="number">#def</span> <span class="number">80px</span> solid;</span><br><span class="line">        <span class="attribute">border-right</span>:transparent <span class="number">80px</span> solid;</span><br><span class="line">        <span class="attribute">border-left</span>:transparent <span class="number">80px</span> solid;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>诺，效果就出来了</p></blockquote><p><img src="https://s3.ax1x.com/2020/11/17/DVvoVJ.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> div </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本格式化，图片及列表标签</title>
      <link href="2020/11/09/04/"/>
      <url>2020/11/09/04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h1><hr><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="1-标题标签"><a href="#1-标题标签" class="headerlink" title="1.  标题标签"></a>1.  标题标签</h3><ul><li>h1~h6字体依次变小,都有加粗的样式。</li><li>h1为主标题，一个文档中出现一次。</li></ul><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><h1>一级标题</h1><h2>二级标题</h2><h3>三级标题</h3><h4>四级标题</h4><h5>五级标题</h5><h6>六级标题</h6><h3 id="2-段落标签"><a href="#2-段落标签" class="headerlink" title="2.  段落标签"></a>2.  段落标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p>这是一段段落</p><h3 id="3-文本格式化标签"><a href="#3-文本格式化标签" class="headerlink" title="3. 文本格式化标签"></a>3. 文本格式化标签</h3><h4 id="（1）strong-b"><a href="#（1）strong-b" class="headerlink" title="（1）strong / b"></a>（1）strong / b</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>文本加粗，有强调作用<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>文本加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：<br><strong>文本加粗，有强调作用</strong><br><b>文本加粗</b></p><h4 id="（2）em-i"><a href="#（2）em-i" class="headerlink" title="（2）em / i"></a>（2）em / i</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>文本倾斜，具有强调作用<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>文本倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：<br><em>文本倾斜，具有强调作用</em><br><i>文本倾斜</i></p><h4 id="（3）mark"><a href="#（3）mark" class="headerlink" title="（3）mark"></a>（3）mark</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>表示被标记或者高亮的文本<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：<br><mark>表示被标记或者高亮的文本</mark></p><h4 id="（4）del-s-ins-u"><a href="#（4）del-s-ins-u" class="headerlink" title="（4）del/s ins/u"></a>（4）del/s ins/u</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>标记插入字，下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>标记插入字，下划线(html5不建议使用)<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：<br><ins>标记插入字，下划线</ins><br><u>标记插入字，下划线(html5不建议使用)</u></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>标记删除字<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>标记删除字(html5不建议使用)<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：<br><del>标记删除字</del><br><s>标记删除字(html5不建议使用)</s></p><h4 id="（5）sub-sup"><a href="#（5）sub-sup" class="headerlink" title="（5）sub / sup"></a>（5）sub / sup</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下标 H<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>O</span><br><span class="line">上标 10<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：<br>下标 H<sub>2</sub>O<br>上标 10<sup>2</sup></p><h4 id="（6）br"><a href="#（6）br" class="headerlink" title="（6）br"></a>（6）br</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>换行自闭合<span class="tag">&lt;<span class="name">br</span> /&gt;</span>标签(单标签)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p>换行自闭合<br />标签(单标签)</p>### 4.图片<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img-blog.csdnimg.cn/20200222221223793.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;198&quot;</span> <span class="attr">height</span>=<span class="string">&quot;198&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;嗨嗨，醒醒，敲代码了！&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是一张表情包&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>效果：<img src="https://img-blog.csdnimg.cn/20200222221223793.jpg" width="198" height="198" alt="嗨嗨，醒醒，敲代码了！" title="这是一张表情包" ><h4 id="手写五角星，并且标红了-图片四要素："><a href="#手写五角星，并且标红了-图片四要素：" class="headerlink" title="(手写五角星，并且标红了)图片四要素："></a>(手写五角星，并且标红了)图片四要素：</h4><ul><li>src（图片路径）</li><li>width（原始宽度）</li><li>height（原始高度）</li><li>alt（在图片无法加载时所代替的文本）<hr /></li><li>title（用于图片描述）</li></ul><blockquote><p><strong>提示：</strong>为图像指定 height 和 width 属性是一个好习惯。如果设置了这些属性，就可以在页面加载时为图像预留空间。如果没有这些属性，浏览器就无法了解图像的尺寸，也就无法为图像保留合适的空间，因此当图像加载时，页面的布局就会发生变化。</p></blockquote><blockquote><p><strong>提示：</strong>请不要通过 height 和 width 属性来缩放图像。如果通过 height 和 width 属性来缩小图像，那么用户就必须下载大容量的图像（即使图像在页面上看上去很小）。正确的做法是，在网页上使用图像之前，应该通过软件把图像处理为合适的尺寸。</p></blockquote><h3 id="5-路径url"><a href="#5-路径url" class="headerlink" title="5.路径url"></a>5.路径url</h3><h4 id="1-绝对路径"><a href="#1-绝对路径" class="headerlink" title="1. 绝对路径"></a>1. 绝对路径</h4><ul><li>1.C:\Users.…\Desktop......\img.jpg（从盘符出发，只能在本机找到，只需要了解)。</li><li>2.<a href="https://img-blog.csdnimg.cn/20200222221223793.jpg">https://img-blog.csdnimg.cn/20200222221223793.jpg</a> (从域名出发)。<h4 id="2-相对路径"><a href="#2-相对路径" class="headerlink" title="2. 相对路径"></a>2. 相对路径</h4></li></ul><p>1.相对于项目</p><ul><li>(1)/             html页面所在的文件夹。</li><li>(2) ./           html页面所在的文件夹内部。</li><li>(3) ../          html页面所在文件夹的外面一层。</li></ul><p>2.相对于文件夹</p><ul><li>（1） ./           同级文件夹</li><li>（2） ../          上级文件夹</li><li>（3） /            从根目录出发</li><li>相对路径相对灵活，但易出错，切记将其输入正确。</li></ul><h3 id="6-a标签"><a href="#6-a标签" class="headerlink" title="6.a标签"></a>6.a标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.w3school.com.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>W3School<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：<br><a href="http://www.w3school.com.cn"  target="_blank">W3School</a></p><blockquote><p>target属性规定在何处打开链接，_self是它的默认属性即在本页面中打开,_blank是新建一个网页打开。</p></blockquote><h3 id="7-列表"><a href="#7-列表" class="headerlink" title="7.  列表"></a>7.  列表</h3><h4 id="无序列表-ul"><a href="#无序列表-ul" class="headerlink" title="无序列表  ul"></a>无序列表  ul</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>英雄联盟<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>地下城勇士<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>穿越火线<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>绝地求生<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>GTAV<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://ftp.bmp.ovh/imgs/2020/11/5c916c356be9dac3.png"></p><h4 id="有序列表-ol"><a href="#有序列表-ol" class="headerlink" title="有序列表 ol"></a>有序列表 ol</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>英雄联盟<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>地下城勇士<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>穿越火线<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>绝地求生<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>GTAV<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://ftp.bmp.ovh/imgs/2020/11/4aab81acb265680b.png"></p><h4 id="自定义列表-dl"><a href="#自定义列表-dl" class="headerlink" title="自定义列表 dl"></a>自定义列表 dl</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>type属性在html5中不赞成使用，我们在之后会用css样式来取代它</p></blockquote><h3 id="8-demo"><a href="#8-demo" class="headerlink" title="8. demo"></a>8. demo</h3><h4 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>静夜思<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>李白<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>窗前<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:#0000FF&quot;</span>&gt;</span>明月光<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，<span class="tag">&lt;<span class="name">br</span>/&gt;</span>疑是<span class="tag">&lt;<span class="name">mark</span>&gt;</span>地上霜<span class="tag">&lt;/<span class="name">mark</span>&gt;</span>。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">ins</span>&gt;</span>举头<span class="tag">&lt;/<span class="name">ins</span>&gt;</span>望明月，<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>低头<span class="tag">&lt;/<span class="name">del</span>&gt;</span>思故乡。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><h1 align="center">静夜思</h1><hr/><h3 align="center"><i>李白</i></h3><p align="center">窗前<span style="color:#0000FF">明月光</span>，<br/>疑是<mark>地上霜</mark>。</p><p align="center"><ins>举头</ins>望明月，<br/><del>低头</del>思故乡。</p><h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>同志们<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img-blog.csdnimg.cn/20200222221223793.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;198&quot;</span> <span class="attr">height</span>=<span class="string">&quot;198&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;嗨嗨，醒醒，敲代码了！&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是一张表情包&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>化学<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>2H<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>+O<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>=2H<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>O<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><ul type="circle">    <li>无序列表</li>    <li>无序列表</li>    <li>        <ol type="A">            <li>有序列表</li>            <li>有序列表</li>            <li>                <dl>                    <dt><h2>同志们</h2><dt>                    <dd>                        <img src="https://img-blog.csdnimg.cn/20200222221223793.jpg" width="198" height="198" alt="嗨嗨，醒醒，敲代码了！" title="这是一张表情包" >                    <dd>                </dl>                <dl>                    <dt><h2>化学</h2><dt>                  <dd>2H<sub>2</sub>+O<sub>2</sub>=2H<sub>2</sub>O</dd>                </dl>            </li>            <li>有序列表</li>        </ol>    </li>    <li>无序列表</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML骨架和基本结构</title>
      <link href="2020/11/03/03/"/>
      <url>2020/11/03/03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-什么是html？"><a href="#1-什么是html？" class="headerlink" title="1.什么是html？"></a>1.什么是html？</h2><p>HTML称为<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%87%E6%9C%AC/2832422">超文本</a>标记语言，是一种标识性的语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的<a href="https://baike.baidu.com/item/Internet/272794">Internet</a>资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明<a href="https://baike.baidu.com/item/%E6%96%87%E5%AD%97/612910">文字</a>，<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2/773307">图形</a>、<a href="https://baike.baidu.com/item/%E5%8A%A8%E7%94%BB/206564">动画</a>、<a href="https://baike.baidu.com/item/%E5%A3%B0%E9%9F%B3/33686">声音</a>、<a href="https://baike.baidu.com/item/%E8%A1%A8%E6%A0%BC/3371820">表格</a>、<a href="https://baike.baidu.com/item/%E9%93%BE%E6%8E%A5/2665501">链接</a>等。 [1] </p><p>超文本是一种组织信息的方式，它通过超级链接方法将文本中的文字、图表与其他信息媒体相关联。这些相互关联的信息媒体可能在同一文本中，也可能是其他文件，或是地理位置相距遥远的某台计算机上的文件。这种组织信息方式将分布在不同位置的信息资源用随机方式进行连接，为人们查找，检索信息提供方便。</p><h2 id="2-html-dom结构树"><a href="#2-html-dom结构树" class="headerlink" title="2.html dom结构树"></a>2.html dom结构树</h2><p><img src="https://s1.ax1x.com/2020/11/03/B6Kfqf.png" alt="html dom树"></p><p><strong>emmm,特别在此声明一下，转发转载请注明出处！</strong></p><h2 id="3-html基本骨架"><a href="#3-html基本骨架" class="headerlink" title="3.html基本骨架"></a>3.html基本骨架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span><span class="comment">&lt;!-- 声明文档类型为 html5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="comment">&lt;!--根目录标签, 超文本标记语言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="comment">&lt;!-- 头部 不可视化标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;utf-8&#x27;</span>&gt;</span><span class="comment">&lt;!-- 万国码 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网页三要素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> web钱端学习 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;keywords&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;钱端,软件,一班&#x27;</span>&gt;</span><span class="comment">&lt;!-- 元标签：引入相关属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;description&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;这是初学钱端的笔记&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">*&#123;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="comment">&lt;!-- 身体 可视化标签内容 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EditPlus编辑器安装和配置html模板</title>
      <link href="2020/11/03/02/"/>
      <url>2020/11/03/02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>首先下载好EditPlus的压缩包，并解压到相应文件夹(这里注意尽量不要压缩到C盘，另外在压缩时先新建一个文件夹然后将文件压缩到新建的文件夹里)。如图是安装成功的界面：</p></blockquote><p><img src="https://s1.ax1x.com/2020/11/03/B6ZLf1.png" alt="B6ZLf1.png"></p><blockquote><p>这里直接点我同意就行，然后依次点击工具-参数设置-模板，打开如图所示界面：</p></blockquote><p><img src="https://s1.ax1x.com/2020/11/03/B6ZXSx.png" alt="B6ZXSx.png"></p><blockquote><p>首先点到文件将创建备份文件的勾选去掉，将编码设置成UTF-8，然后点开模板，如图：</p></blockquote><p><img src="https://s1.ax1x.com/2020/11/03/B6Zjl6.png" alt="B6Zjl6.png"></p><blockquote><p>点击载入，并删除原来自带的代码，换成我们自己的然后保存，如图：</p></blockquote><p><img src="https://s1.ax1x.com/2020/11/03/B6Zv6K.png" alt="B6Zv6K.png"></p><blockquote><p>模板内容请看下一篇文章。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> EditPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你认识什么是web前端</title>
      <link href="2020/11/03/01/"/>
      <url>2020/11/03/01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>web前端开发是从网页设计开发演变而来，在互联网演化进程中，网页设计开发是web1.0的产物，那时网站的主要内容都是静态的，用户使用网站的行为也以浏览为主。</p><p>随着web技术的不断提升，网站的前端由此发生了翻天覆地的变化。网页不再只是承载单一的文字和图片，各种丰富媒体让网页的内容更加生动，网页上软件化的交互形式为用户提供了更好的使用体验。由此诞生了web前端。</p><p><img src="https://pic4.zhimg.com/80/v2-2b6f0c53d8e6fc003ce2d73cb062e6cb_720w.jpg?source=1940ef5c"></p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>web（World Wide Web）即全球广域网，也称为万维网，它是一种基于超文本和HTTP的、全球性的、动态交互的、跨平台的分布式图形信息系统。是建立在Internet上的一种网络服务，为浏览者在Internet上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超级链接将Internet上的信息节点组织成一个互为关联的网状结构。</p><h2 id="2-web前端包括那些技术？"><a href="#2-web前端包括那些技术？" class="headerlink" title="2.web前端包括那些技术？"></a>2.web前端包括那些技术？</h2><p>前端三大基础毫无疑问就是HTML、CSS和JS。HTML被叫做“骨”，它是用来描述网页内容和结构的。css被叫做“肉”，他是用来描述网页的样式的。js也是在web前端开发中尤为重要的一门基础技术，它也被叫做“魂”，它用来处理网页中的交互行为，随着ES6+的不断演变，开始有了node.js能运行在服务端的语言，js的热度一下子就上去了。</p><h2 id="3-流行的框架和组件"><a href="#3-流行的框架和组件" class="headerlink" title="3.流行的框架和组件"></a>3.流行的框架和组件</h2><h3 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h3><ul><li>Bootstrap、Element-UI、Color UI</li></ul><h3 id="js框架"><a href="#js框架" class="headerlink" title="js框架"></a>js框架</h3><ul><li>Angular.js、Vue.js、React.js</li></ul><h3 id="可视化组件"><a href="#可视化组件" class="headerlink" title="可视化组件"></a>可视化组件</h3><ul><li>Echarts</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
